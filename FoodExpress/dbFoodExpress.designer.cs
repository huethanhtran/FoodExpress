#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodExpress
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FoodExpress")]
	public partial class dbFoodExpressDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertWarehouseImport(WarehouseImport instance);
    partial void UpdateWarehouseImport(WarehouseImport instance);
    partial void DeleteWarehouseImport(WarehouseImport instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerRole(CustomerRole instance);
    partial void UpdateCustomerRole(CustomerRole instance);
    partial void DeleteCustomerRole(CustomerRole instance);
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertDish_Attribute(Dish_Attribute instance);
    partial void UpdateDish_Attribute(Dish_Attribute instance);
    partial void DeleteDish_Attribute(Dish_Attribute instance);
    partial void InsertDish_Category(Dish_Category instance);
    partial void UpdateDish_Category(Dish_Category instance);
    partial void DeleteDish_Category(Dish_Category instance);
    partial void InsertExportDetail(ExportDetail instance);
    partial void UpdateExportDetail(ExportDetail instance);
    partial void DeleteExportDetail(ExportDetail instance);
    partial void InsertImportDetail(ImportDetail instance);
    partial void UpdateImportDetail(ImportDetail instance);
    partial void DeleteImportDetail(ImportDetail instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertMethod(Method instance);
    partial void UpdateMethod(Method instance);
    partial void DeleteMethod(Method instance);
    partial void InsertMethodDetail(MethodDetail instance);
    partial void UpdateMethodDetail(MethodDetail instance);
    partial void DeleteMethodDetail(MethodDetail instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertRes_Category(Res_Category instance);
    partial void UpdateRes_Category(Res_Category instance);
    partial void DeleteRes_Category(Res_Category instance);
    partial void InsertRes_Categoty_Mapping(Res_Categoty_Mapping instance);
    partial void UpdateRes_Categoty_Mapping(Res_Categoty_Mapping instance);
    partial void DeleteRes_Categoty_Mapping(Res_Categoty_Mapping instance);
    partial void InsertRes_Cuisine(Res_Cuisine instance);
    partial void UpdateRes_Cuisine(Res_Cuisine instance);
    partial void DeleteRes_Cuisine(Res_Cuisine instance);
    partial void InsertRes_Cuisine_Mapping(Res_Cuisine_Mapping instance);
    partial void UpdateRes_Cuisine_Mapping(Res_Cuisine_Mapping instance);
    partial void DeleteRes_Cuisine_Mapping(Res_Cuisine_Mapping instance);
    partial void InsertRes_Restaurant(Res_Restaurant instance);
    partial void UpdateRes_Restaurant(Res_Restaurant instance);
    partial void DeleteRes_Restaurant(Res_Restaurant instance);
    partial void InsertWarehouseExport(WarehouseExport instance);
    partial void UpdateWarehouseExport(WarehouseExport instance);
    partial void DeleteWarehouseExport(WarehouseExport instance);
    #endregion
		
		public dbFoodExpressDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FoodExpressConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbFoodExpressDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFoodExpressDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFoodExpressDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFoodExpressDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<WarehouseImport> WarehouseImports
		{
			get
			{
				return this.GetTable<WarehouseImport>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerRole> CustomerRoles
		{
			get
			{
				return this.GetTable<CustomerRole>();
			}
		}
		
		public System.Data.Linq.Table<Dish> Dishes
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<Dish_Attribute> Dish_Attributes
		{
			get
			{
				return this.GetTable<Dish_Attribute>();
			}
		}
		
		public System.Data.Linq.Table<Dish_Category> Dish_Categories
		{
			get
			{
				return this.GetTable<Dish_Category>();
			}
		}
		
		public System.Data.Linq.Table<ExportDetail> ExportDetails
		{
			get
			{
				return this.GetTable<ExportDetail>();
			}
		}
		
		public System.Data.Linq.Table<ImportDetail> ImportDetails
		{
			get
			{
				return this.GetTable<ImportDetail>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Method> Methods
		{
			get
			{
				return this.GetTable<Method>();
			}
		}
		
		public System.Data.Linq.Table<MethodDetail> MethodDetails
		{
			get
			{
				return this.GetTable<MethodDetail>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Res_Category> Res_Categories
		{
			get
			{
				return this.GetTable<Res_Category>();
			}
		}
		
		public System.Data.Linq.Table<Res_Categoty_Mapping> Res_Categoty_Mappings
		{
			get
			{
				return this.GetTable<Res_Categoty_Mapping>();
			}
		}
		
		public System.Data.Linq.Table<Res_Cuisine> Res_Cuisines
		{
			get
			{
				return this.GetTable<Res_Cuisine>();
			}
		}
		
		public System.Data.Linq.Table<Res_Cuisine_Mapping> Res_Cuisine_Mappings
		{
			get
			{
				return this.GetTable<Res_Cuisine_Mapping>();
			}
		}
		
		public System.Data.Linq.Table<Res_Restaurant> Res_Restaurants
		{
			get
			{
				return this.GetTable<Res_Restaurant>();
			}
		}
		
		public System.Data.Linq.Table<WarehouseExport> WarehouseExports
		{
			get
			{
				return this.GetTable<WarehouseExport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCity;
		
		private string _NameCity;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Res_Restaurant> _Res_Restaurants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCityChanging(int value);
    partial void OnIDCityChanged();
    partial void OnNameCityChanging(string value);
    partial void OnNameCityChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public City()
		{
			this._Res_Restaurants = new EntitySet<Res_Restaurant>(new Action<Res_Restaurant>(this.attach_Res_Restaurants), new Action<Res_Restaurant>(this.detach_Res_Restaurants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCity", DbType="NVarChar(100)")]
		public string NameCity
		{
			get
			{
				return this._NameCity;
			}
			set
			{
				if ((this._NameCity != value))
				{
					this.OnNameCityChanging(value);
					this.SendPropertyChanging();
					this._NameCity = value;
					this.SendPropertyChanged("NameCity");
					this.OnNameCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Res_Restaurant", Storage="_Res_Restaurants", ThisKey="IDCity", OtherKey="IDCity")]
		public EntitySet<Res_Restaurant> Res_Restaurants
		{
			get
			{
				return this._Res_Restaurants;
			}
			set
			{
				this._Res_Restaurants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Res_Restaurants(Res_Restaurant entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Res_Restaurants(Res_Restaurant entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WarehouseImport")]
	public partial class WarehouseImport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDImport;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _ImportDate;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ImportDetail> _ImportDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDImportChanging(int value);
    partial void OnIDImportChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnImportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnImportDateChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public WarehouseImport()
		{
			this._ImportDetails = new EntitySet<ImportDetail>(new Action<ImportDetail>(this.attach_ImportDetails), new Action<ImportDetail>(this.detach_ImportDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDImport", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDImport
		{
			get
			{
				return this._IDImport;
			}
			set
			{
				if ((this._IDImport != value))
				{
					this.OnIDImportChanging(value);
					this.SendPropertyChanging();
					this._IDImport = value;
					this.SendPropertyChanged("IDImport");
					this.OnIDImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ImportDate
		{
			get
			{
				return this._ImportDate;
			}
			set
			{
				if ((this._ImportDate != value))
				{
					this.OnImportDateChanging(value);
					this.SendPropertyChanging();
					this._ImportDate = value;
					this.SendPropertyChanged("ImportDate");
					this.OnImportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WarehouseImport_ImportDetail", Storage="_ImportDetails", ThisKey="IDImport", OtherKey="IDImport")]
		public EntitySet<ImportDetail> ImportDetails
		{
			get
			{
				return this._ImportDetails;
			}
			set
			{
				this._ImportDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImportDetails(ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.WarehouseImport = this;
		}
		
		private void detach_ImportDetails(ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.WarehouseImport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCustomer;
		
		private string _NameCustomer;
		
		private string _FirstName;
		
		private string _UserName;
		
		private string _PasswordCustomer;
		
		private string _PasswordSalt;
		
		private string _Email;
		
		private string _CustomerAddress;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Phone;
		
		private string _Fax;
		
		private System.Nullable<int> _IDRole;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private string _Avatar;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<CustomerRole> _CustomerRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnNameCustomerChanging(string value);
    partial void OnNameCustomerChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordCustomerChanging(string value);
    partial void OnPasswordCustomerChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnIDRoleChanging(System.Nullable<int> value);
    partial void OnIDRoleChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._CustomerRole = default(EntityRef<CustomerRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCustomer", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NameCustomer
		{
			get
			{
				return this._NameCustomer;
			}
			set
			{
				if ((this._NameCustomer != value))
				{
					this.OnNameCustomerChanging(value);
					this.SendPropertyChanging();
					this._NameCustomer = value;
					this.SendPropertyChanged("NameCustomer");
					this.OnNameCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordCustomer", DbType="VarChar(200)")]
		public string PasswordCustomer
		{
			get
			{
				return this._PasswordCustomer;
			}
			set
			{
				if ((this._PasswordCustomer != value))
				{
					this.OnPasswordCustomerChanging(value);
					this.SendPropertyChanging();
					this._PasswordCustomer = value;
					this.SendPropertyChanged("PasswordCustomer");
					this.OnPasswordCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="VarChar(200)")]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(200)")]
		public string CustomerAddress
		{
			get
			{
				return this._CustomerAddress;
			}
			set
			{
				if ((this._CustomerAddress != value))
				{
					this.OnCustomerAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerAddress = value;
					this.SendPropertyChanged("CustomerAddress");
					this.OnCustomerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(100)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRole", DbType="Int")]
		public System.Nullable<int> IDRole
		{
			get
			{
				return this._IDRole;
			}
			set
			{
				if ((this._IDRole != value))
				{
					if (this._CustomerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoleChanging(value);
					this.SendPropertyChanging();
					this._IDRole = value;
					this.SendPropertyChanged("IDRole");
					this.OnIDRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="NVarChar(500)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_Customer", Storage="_CustomerRole", ThisKey="IDRole", OtherKey="IDRole", IsForeignKey=true)]
		public CustomerRole CustomerRole
		{
			get
			{
				return this._CustomerRole.Entity;
			}
			set
			{
				CustomerRole previousValue = this._CustomerRole.Entity;
				if (((previousValue != value) 
							|| (this._CustomerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerRole.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerRole.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._IDRole = value.IDRole;
					}
					else
					{
						this._IDRole = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerRole")]
	public partial class CustomerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRole;
		
		private string _NameRole;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRoleChanging(int value);
    partial void OnIDRoleChanged();
    partial void OnNameRoleChanging(string value);
    partial void OnNameRoleChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public CustomerRole()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRole", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRole
		{
			get
			{
				return this._IDRole;
			}
			set
			{
				if ((this._IDRole != value))
				{
					this.OnIDRoleChanging(value);
					this.SendPropertyChanging();
					this._IDRole = value;
					this.SendPropertyChanged("IDRole");
					this.OnIDRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRole", DbType="NVarChar(100)")]
		public string NameRole
		{
			get
			{
				return this._NameRole;
			}
			set
			{
				if ((this._NameRole != value))
				{
					this.OnNameRoleChanging(value);
					this.SendPropertyChanging();
					this._NameRole = value;
					this.SendPropertyChanged("NameRole");
					this.OnNameRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerRole_Customer", Storage="_Customers", ThisKey="IDRole", OtherKey="IDRole")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDish;
		
		private string _NameDish;
		
		private System.Nullable<int> _IDDishCate;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Dish_Attribute> _Dish_Attributes;
		
		private EntitySet<Method> _Methods;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Dish_Category> _Dish_Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDishChanging(int value);
    partial void OnIDDishChanged();
    partial void OnNameDishChanging(string value);
    partial void OnNameDishChanged();
    partial void OnIDDishCateChanging(System.Nullable<int> value);
    partial void OnIDDishCateChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Dish()
		{
			this._Dish_Attributes = new EntitySet<Dish_Attribute>(new Action<Dish_Attribute>(this.attach_Dish_Attributes), new Action<Dish_Attribute>(this.detach_Dish_Attributes));
			this._Methods = new EntitySet<Method>(new Action<Method>(this.attach_Methods), new Action<Method>(this.detach_Methods));
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Dish_Category = default(EntityRef<Dish_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDish", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDish
		{
			get
			{
				return this._IDDish;
			}
			set
			{
				if ((this._IDDish != value))
				{
					this.OnIDDishChanging(value);
					this.SendPropertyChanging();
					this._IDDish = value;
					this.SendPropertyChanged("IDDish");
					this.OnIDDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameDish", DbType="NVarChar(100)")]
		public string NameDish
		{
			get
			{
				return this._NameDish;
			}
			set
			{
				if ((this._NameDish != value))
				{
					this.OnNameDishChanging(value);
					this.SendPropertyChanging();
					this._NameDish = value;
					this.SendPropertyChanged("NameDish");
					this.OnNameDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDishCate", DbType="Int")]
		public System.Nullable<int> IDDishCate
		{
			get
			{
				return this._IDDishCate;
			}
			set
			{
				if ((this._IDDishCate != value))
				{
					if (this._Dish_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDishCateChanging(value);
					this.SendPropertyChanging();
					this._IDDishCate = value;
					this.SendPropertyChanged("IDDishCate");
					this.OnIDDishCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Dish_Attribute", Storage="_Dish_Attributes", ThisKey="IDDish", OtherKey="IDDish")]
		public EntitySet<Dish_Attribute> Dish_Attributes
		{
			get
			{
				return this._Dish_Attributes;
			}
			set
			{
				this._Dish_Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Method", Storage="_Methods", ThisKey="IDDish", OtherKey="IDDish")]
		public EntitySet<Method> Methods
		{
			get
			{
				return this._Methods;
			}
			set
			{
				this._Methods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderDetail", Storage="_OrderDetails", ThisKey="IDDish", OtherKey="IDDish")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Category_Dish", Storage="_Dish_Category", ThisKey="IDDishCate", OtherKey="IDDishCate", IsForeignKey=true)]
		public Dish_Category Dish_Category
		{
			get
			{
				return this._Dish_Category.Entity;
			}
			set
			{
				Dish_Category previousValue = this._Dish_Category.Entity;
				if (((previousValue != value) 
							|| (this._Dish_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish_Category.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._Dish_Category.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._IDDishCate = value.IDDishCate;
					}
					else
					{
						this._IDDishCate = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dish_Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dish_Attributes(Dish_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Dish_Attributes(Dish_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_Methods(Method entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Methods(Method entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish_Attribute")]
	public partial class Dish_Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAttribute;
		
		private string _NameAttribute;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _IDDish;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Dish> _Dish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAttributeChanging(int value);
    partial void OnIDAttributeChanged();
    partial void OnNameAttributeChanging(string value);
    partial void OnNameAttributeChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIDDishChanging(System.Nullable<int> value);
    partial void OnIDDishChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Dish_Attribute()
		{
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAttribute", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAttribute
		{
			get
			{
				return this._IDAttribute;
			}
			set
			{
				if ((this._IDAttribute != value))
				{
					this.OnIDAttributeChanging(value);
					this.SendPropertyChanging();
					this._IDAttribute = value;
					this.SendPropertyChanged("IDAttribute");
					this.OnIDAttributeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAttribute", DbType="NVarChar(100)")]
		public string NameAttribute
		{
			get
			{
				return this._NameAttribute;
			}
			set
			{
				if ((this._NameAttribute != value))
				{
					this.OnNameAttributeChanging(value);
					this.SendPropertyChanging();
					this._NameAttribute = value;
					this.SendPropertyChanged("NameAttribute");
					this.OnNameAttributeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDish", DbType="Int")]
		public System.Nullable<int> IDDish
		{
			get
			{
				return this._IDDish;
			}
			set
			{
				if ((this._IDDish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDishChanging(value);
					this.SendPropertyChanging();
					this._IDDish = value;
					this.SendPropertyChanged("IDDish");
					this.OnIDDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Dish_Attribute", Storage="_Dish", ThisKey="IDDish", OtherKey="IDDish", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Dish_Attributes.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Dish_Attributes.Add(this);
						this._IDDish = value.IDDish;
					}
					else
					{
						this._IDDish = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish_Category")]
	public partial class Dish_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDishCate;
		
		private string _NameDishCate;
		
		private System.Nullable<int> _IDRes;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Dish> _Dishes;
		
		private EntityRef<Res_Restaurant> _Res_Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDishCateChanging(int value);
    partial void OnIDDishCateChanged();
    partial void OnNameDishCateChanging(string value);
    partial void OnNameDishCateChanged();
    partial void OnIDResChanging(System.Nullable<int> value);
    partial void OnIDResChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Dish_Category()
		{
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			this._Res_Restaurant = default(EntityRef<Res_Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDishCate", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDishCate
		{
			get
			{
				return this._IDDishCate;
			}
			set
			{
				if ((this._IDDishCate != value))
				{
					this.OnIDDishCateChanging(value);
					this.SendPropertyChanging();
					this._IDDishCate = value;
					this.SendPropertyChanged("IDDishCate");
					this.OnIDDishCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameDishCate", DbType="NVarChar(100)")]
		public string NameDishCate
		{
			get
			{
				return this._NameDishCate;
			}
			set
			{
				if ((this._NameDishCate != value))
				{
					this.OnNameDishCateChanging(value);
					this.SendPropertyChanging();
					this._NameDishCate = value;
					this.SendPropertyChanged("NameDishCate");
					this.OnNameDishCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", DbType="Int")]
		public System.Nullable<int> IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					if (this._Res_Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Category_Dish", Storage="_Dishes", ThisKey="IDDishCate", OtherKey="IDDishCate")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Dish_Category", Storage="_Res_Restaurant", ThisKey="IDRes", OtherKey="IDRes", IsForeignKey=true)]
		public Res_Restaurant Res_Restaurant
		{
			get
			{
				return this._Res_Restaurant.Entity;
			}
			set
			{
				Res_Restaurant previousValue = this._Res_Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Res_Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Restaurant.Entity = null;
						previousValue.Dish_Categories.Remove(this);
					}
					this._Res_Restaurant.Entity = value;
					if ((value != null))
					{
						value.Dish_Categories.Add(this);
						this._IDRes = value.IDRes;
					}
					else
					{
						this._IDRes = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Dish_Category = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Dish_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExportDetail")]
	public partial class ExportDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDEDetail;
		
		private System.Nullable<int> _IDExport;
		
		private System.Nullable<int> _IDIngredient;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Unit;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<WarehouseExport> _WarehouseExport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEDetailChanging(int value);
    partial void OnIDEDetailChanged();
    partial void OnIDExportChanging(System.Nullable<int> value);
    partial void OnIDExportChanged();
    partial void OnIDIngredientChanging(System.Nullable<int> value);
    partial void OnIDIngredientChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(System.Nullable<int> value);
    partial void OnUnitChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ExportDetail()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._WarehouseExport = default(EntityRef<WarehouseExport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDEDetail
		{
			get
			{
				return this._IDEDetail;
			}
			set
			{
				if ((this._IDEDetail != value))
				{
					this.OnIDEDetailChanging(value);
					this.SendPropertyChanging();
					this._IDEDetail = value;
					this.SendPropertyChanged("IDEDetail");
					this.OnIDEDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDExport", DbType="Int")]
		public System.Nullable<int> IDExport
		{
			get
			{
				return this._IDExport;
			}
			set
			{
				if ((this._IDExport != value))
				{
					if (this._WarehouseExport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDExportChanging(value);
					this.SendPropertyChanging();
					this._IDExport = value;
					this.SendPropertyChanged("IDExport");
					this.OnIDExportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDIngredient", DbType="Int")]
		public System.Nullable<int> IDIngredient
		{
			get
			{
				return this._IDIngredient;
			}
			set
			{
				if ((this._IDIngredient != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDIngredientChanging(value);
					this.SendPropertyChanging();
					this._IDIngredient = value;
					this.SendPropertyChanged("IDIngredient");
					this.OnIDIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int")]
		public System.Nullable<int> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_ExportDetail", Storage="_Ingredient", ThisKey="IDIngredient", OtherKey="IDIngredient", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.ExportDetails.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.ExportDetails.Add(this);
						this._IDIngredient = value.IDIngredient;
					}
					else
					{
						this._IDIngredient = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WarehouseExport_ExportDetail", Storage="_WarehouseExport", ThisKey="IDExport", OtherKey="IDExport", IsForeignKey=true)]
		public WarehouseExport WarehouseExport
		{
			get
			{
				return this._WarehouseExport.Entity;
			}
			set
			{
				WarehouseExport previousValue = this._WarehouseExport.Entity;
				if (((previousValue != value) 
							|| (this._WarehouseExport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WarehouseExport.Entity = null;
						previousValue.ExportDetails.Remove(this);
					}
					this._WarehouseExport.Entity = value;
					if ((value != null))
					{
						value.ExportDetails.Add(this);
						this._IDExport = value.IDExport;
					}
					else
					{
						this._IDExport = default(Nullable<int>);
					}
					this.SendPropertyChanged("WarehouseExport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImportDetail")]
	public partial class ImportDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDIDetail;
		
		private System.Nullable<int> _IDImport;
		
		private System.Nullable<int> _IDIngredient;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Unit;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<WarehouseImport> _WarehouseImport;
		
		private EntityRef<Ingredient> _Ingredient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDIDetailChanging(int value);
    partial void OnIDIDetailChanged();
    partial void OnIDImportChanging(System.Nullable<int> value);
    partial void OnIDImportChanged();
    partial void OnIDIngredientChanging(System.Nullable<int> value);
    partial void OnIDIngredientChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(System.Nullable<int> value);
    partial void OnUnitChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ImportDetail()
		{
			this._WarehouseImport = default(EntityRef<WarehouseImport>);
			this._Ingredient = default(EntityRef<Ingredient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDIDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDIDetail
		{
			get
			{
				return this._IDIDetail;
			}
			set
			{
				if ((this._IDIDetail != value))
				{
					this.OnIDIDetailChanging(value);
					this.SendPropertyChanging();
					this._IDIDetail = value;
					this.SendPropertyChanged("IDIDetail");
					this.OnIDIDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDImport", DbType="Int")]
		public System.Nullable<int> IDImport
		{
			get
			{
				return this._IDImport;
			}
			set
			{
				if ((this._IDImport != value))
				{
					if (this._WarehouseImport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDImportChanging(value);
					this.SendPropertyChanging();
					this._IDImport = value;
					this.SendPropertyChanged("IDImport");
					this.OnIDImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDIngredient", DbType="Int")]
		public System.Nullable<int> IDIngredient
		{
			get
			{
				return this._IDIngredient;
			}
			set
			{
				if ((this._IDIngredient != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDIngredientChanging(value);
					this.SendPropertyChanging();
					this._IDIngredient = value;
					this.SendPropertyChanged("IDIngredient");
					this.OnIDIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int")]
		public System.Nullable<int> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WarehouseImport_ImportDetail", Storage="_WarehouseImport", ThisKey="IDImport", OtherKey="IDImport", IsForeignKey=true)]
		public WarehouseImport WarehouseImport
		{
			get
			{
				return this._WarehouseImport.Entity;
			}
			set
			{
				WarehouseImport previousValue = this._WarehouseImport.Entity;
				if (((previousValue != value) 
							|| (this._WarehouseImport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WarehouseImport.Entity = null;
						previousValue.ImportDetails.Remove(this);
					}
					this._WarehouseImport.Entity = value;
					if ((value != null))
					{
						value.ImportDetails.Add(this);
						this._IDImport = value.IDImport;
					}
					else
					{
						this._IDImport = default(Nullable<int>);
					}
					this.SendPropertyChanged("WarehouseImport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_ImportDetail", Storage="_Ingredient", ThisKey="IDIngredient", OtherKey="IDIngredient", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.ImportDetails.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.ImportDetails.Add(this);
						this._IDIngredient = value.IDIngredient;
					}
					else
					{
						this._IDIngredient = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDIngredient;
		
		private string _NameIngredient;
		
		private System.Nullable<int> _IDRes;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ExportDetail> _ExportDetails;
		
		private EntitySet<ImportDetail> _ImportDetails;
		
		private EntitySet<MethodDetail> _MethodDetails;
		
		private EntityRef<Res_Restaurant> _Res_Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDIngredientChanging(int value);
    partial void OnIDIngredientChanged();
    partial void OnNameIngredientChanging(string value);
    partial void OnNameIngredientChanged();
    partial void OnIDResChanging(System.Nullable<int> value);
    partial void OnIDResChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Ingredient()
		{
			this._ExportDetails = new EntitySet<ExportDetail>(new Action<ExportDetail>(this.attach_ExportDetails), new Action<ExportDetail>(this.detach_ExportDetails));
			this._ImportDetails = new EntitySet<ImportDetail>(new Action<ImportDetail>(this.attach_ImportDetails), new Action<ImportDetail>(this.detach_ImportDetails));
			this._MethodDetails = new EntitySet<MethodDetail>(new Action<MethodDetail>(this.attach_MethodDetails), new Action<MethodDetail>(this.detach_MethodDetails));
			this._Res_Restaurant = default(EntityRef<Res_Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDIngredient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDIngredient
		{
			get
			{
				return this._IDIngredient;
			}
			set
			{
				if ((this._IDIngredient != value))
				{
					this.OnIDIngredientChanging(value);
					this.SendPropertyChanging();
					this._IDIngredient = value;
					this.SendPropertyChanged("IDIngredient");
					this.OnIDIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameIngredient", DbType="NVarChar(100)")]
		public string NameIngredient
		{
			get
			{
				return this._NameIngredient;
			}
			set
			{
				if ((this._NameIngredient != value))
				{
					this.OnNameIngredientChanging(value);
					this.SendPropertyChanging();
					this._NameIngredient = value;
					this.SendPropertyChanged("NameIngredient");
					this.OnNameIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", DbType="Int")]
		public System.Nullable<int> IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					if (this._Res_Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_ExportDetail", Storage="_ExportDetails", ThisKey="IDIngredient", OtherKey="IDIngredient")]
		public EntitySet<ExportDetail> ExportDetails
		{
			get
			{
				return this._ExportDetails;
			}
			set
			{
				this._ExportDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_ImportDetail", Storage="_ImportDetails", ThisKey="IDIngredient", OtherKey="IDIngredient")]
		public EntitySet<ImportDetail> ImportDetails
		{
			get
			{
				return this._ImportDetails;
			}
			set
			{
				this._ImportDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MethodDetail", Storage="_MethodDetails", ThisKey="IDIngredient", OtherKey="IDIngredient")]
		public EntitySet<MethodDetail> MethodDetails
		{
			get
			{
				return this._MethodDetails;
			}
			set
			{
				this._MethodDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Ingredient", Storage="_Res_Restaurant", ThisKey="IDRes", OtherKey="IDRes", IsForeignKey=true)]
		public Res_Restaurant Res_Restaurant
		{
			get
			{
				return this._Res_Restaurant.Entity;
			}
			set
			{
				Res_Restaurant previousValue = this._Res_Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Res_Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Restaurant.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Res_Restaurant.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._IDRes = value.IDRes;
					}
					else
					{
						this._IDRes = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExportDetails(ExportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_ExportDetails(ExportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
		
		private void attach_ImportDetails(ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_ImportDetails(ImportDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
		
		private void attach_MethodDetails(MethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_MethodDetails(MethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Method")]
	public partial class Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMethod;
		
		private string _NameMethod;
		
		private System.Nullable<int> _FinishProductNo;
		
		private System.Nullable<int> _IDDish;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<MethodDetail> _MethodDetails;
		
		private EntityRef<Dish> _Dish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMethodChanging(int value);
    partial void OnIDMethodChanged();
    partial void OnNameMethodChanging(string value);
    partial void OnNameMethodChanged();
    partial void OnFinishProductNoChanging(System.Nullable<int> value);
    partial void OnFinishProductNoChanged();
    partial void OnIDDishChanging(System.Nullable<int> value);
    partial void OnIDDishChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Method()
		{
			this._MethodDetails = new EntitySet<MethodDetail>(new Action<MethodDetail>(this.attach_MethodDetails), new Action<MethodDetail>(this.detach_MethodDetails));
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMethod", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMethod
		{
			get
			{
				return this._IDMethod;
			}
			set
			{
				if ((this._IDMethod != value))
				{
					this.OnIDMethodChanging(value);
					this.SendPropertyChanging();
					this._IDMethod = value;
					this.SendPropertyChanged("IDMethod");
					this.OnIDMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameMethod", DbType="NVarChar(100)")]
		public string NameMethod
		{
			get
			{
				return this._NameMethod;
			}
			set
			{
				if ((this._NameMethod != value))
				{
					this.OnNameMethodChanging(value);
					this.SendPropertyChanging();
					this._NameMethod = value;
					this.SendPropertyChanged("NameMethod");
					this.OnNameMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishProductNo", DbType="Int")]
		public System.Nullable<int> FinishProductNo
		{
			get
			{
				return this._FinishProductNo;
			}
			set
			{
				if ((this._FinishProductNo != value))
				{
					this.OnFinishProductNoChanging(value);
					this.SendPropertyChanging();
					this._FinishProductNo = value;
					this.SendPropertyChanged("FinishProductNo");
					this.OnFinishProductNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDish", DbType="Int")]
		public System.Nullable<int> IDDish
		{
			get
			{
				return this._IDDish;
			}
			set
			{
				if ((this._IDDish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDishChanging(value);
					this.SendPropertyChanging();
					this._IDDish = value;
					this.SendPropertyChanged("IDDish");
					this.OnIDDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_MethodDetail", Storage="_MethodDetails", ThisKey="IDMethod", OtherKey="IDMethod")]
		public EntitySet<MethodDetail> MethodDetails
		{
			get
			{
				return this._MethodDetails;
			}
			set
			{
				this._MethodDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Method", Storage="_Dish", ThisKey="IDDish", OtherKey="IDDish", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Methods.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Methods.Add(this);
						this._IDDish = value.IDDish;
					}
					else
					{
						this._IDDish = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MethodDetails(MethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.Method = this;
		}
		
		private void detach_MethodDetails(MethodDetail entity)
		{
			this.SendPropertyChanging();
			entity.Method = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MethodDetail")]
	public partial class MethodDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMDetail;
		
		private System.Nullable<int> _IDMethod;
		
		private System.Nullable<int> _IDIngredient;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Unit;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Method> _Method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMDetailChanging(int value);
    partial void OnIDMDetailChanged();
    partial void OnIDMethodChanging(System.Nullable<int> value);
    partial void OnIDMethodChanged();
    partial void OnIDIngredientChanging(System.Nullable<int> value);
    partial void OnIDIngredientChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(System.Nullable<int> value);
    partial void OnUnitChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public MethodDetail()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Method = default(EntityRef<Method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMDetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMDetail
		{
			get
			{
				return this._IDMDetail;
			}
			set
			{
				if ((this._IDMDetail != value))
				{
					this.OnIDMDetailChanging(value);
					this.SendPropertyChanging();
					this._IDMDetail = value;
					this.SendPropertyChanged("IDMDetail");
					this.OnIDMDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMethod", DbType="Int")]
		public System.Nullable<int> IDMethod
		{
			get
			{
				return this._IDMethod;
			}
			set
			{
				if ((this._IDMethod != value))
				{
					if (this._Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMethodChanging(value);
					this.SendPropertyChanging();
					this._IDMethod = value;
					this.SendPropertyChanged("IDMethod");
					this.OnIDMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDIngredient", DbType="Int")]
		public System.Nullable<int> IDIngredient
		{
			get
			{
				return this._IDIngredient;
			}
			set
			{
				if ((this._IDIngredient != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDIngredientChanging(value);
					this.SendPropertyChanging();
					this._IDIngredient = value;
					this.SendPropertyChanged("IDIngredient");
					this.OnIDIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int")]
		public System.Nullable<int> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_MethodDetail", Storage="_Ingredient", ThisKey="IDIngredient", OtherKey="IDIngredient", IsForeignKey=true)]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.MethodDetails.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.MethodDetails.Add(this);
						this._IDIngredient = value.IDIngredient;
					}
					else
					{
						this._IDIngredient = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_MethodDetail", Storage="_Method", ThisKey="IDMethod", OtherKey="IDMethod", IsForeignKey=true)]
		public Method Method
		{
			get
			{
				return this._Method.Entity;
			}
			set
			{
				Method previousValue = this._Method.Entity;
				if (((previousValue != value) 
							|| (this._Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method.Entity = null;
						previousValue.MethodDetails.Remove(this);
					}
					this._Method.Entity = value;
					if ((value != null))
					{
						value.MethodDetails.Add(this);
						this._IDMethod = value.IDMethod;
					}
					else
					{
						this._IDMethod = default(Nullable<int>);
					}
					this.SendPropertyChanged("Method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDOrder;
		
		private System.Nullable<int> _IDRes;
		
		private System.Nullable<decimal> _OrderPrice;
		
		private System.Nullable<decimal> _ServiceFee;
		
		private System.Nullable<decimal> _ShippingFee;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<int> _IDCustomer;
		
		private System.Nullable<int> _UpdatedBy;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _IsPay;
		
		private string _AddressOrder;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Res_Restaurant> _Res_Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDOrderChanging(int value);
    partial void OnIDOrderChanged();
    partial void OnIDResChanging(System.Nullable<int> value);
    partial void OnIDResChanged();
    partial void OnOrderPriceChanging(System.Nullable<decimal> value);
    partial void OnOrderPriceChanged();
    partial void OnServiceFeeChanging(System.Nullable<decimal> value);
    partial void OnServiceFeeChanged();
    partial void OnShippingFeeChanging(System.Nullable<decimal> value);
    partial void OnShippingFeeChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnIDCustomerChanging(System.Nullable<int> value);
    partial void OnIDCustomerChanged();
    partial void OnUpdatedByChanging(System.Nullable<int> value);
    partial void OnUpdatedByChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIsPayChanging(System.Nullable<bool> value);
    partial void OnIsPayChanged();
    partial void OnAddressOrderChanging(string value);
    partial void OnAddressOrderChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Customer = default(EntityRef<Customer>);
			this._Res_Restaurant = default(EntityRef<Res_Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", DbType="Int")]
		public System.Nullable<int> IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					if (this._Res_Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderPrice", DbType="Money")]
		public System.Nullable<decimal> OrderPrice
		{
			get
			{
				return this._OrderPrice;
			}
			set
			{
				if ((this._OrderPrice != value))
				{
					this.OnOrderPriceChanging(value);
					this.SendPropertyChanging();
					this._OrderPrice = value;
					this.SendPropertyChanged("OrderPrice");
					this.OnOrderPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money")]
		public System.Nullable<decimal> ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingFee", DbType="Money")]
		public System.Nullable<decimal> ShippingFee
		{
			get
			{
				return this._ShippingFee;
			}
			set
			{
				if ((this._ShippingFee != value))
				{
					this.OnShippingFeeChanging(value);
					this.SendPropertyChanging();
					this._ShippingFee = value;
					this.SendPropertyChanged("ShippingFee");
					this.OnShippingFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="Int")]
		public System.Nullable<int> IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="Int")]
		public System.Nullable<int> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPay", DbType="Bit")]
		public System.Nullable<bool> IsPay
		{
			get
			{
				return this._IsPay;
			}
			set
			{
				if ((this._IsPay != value))
				{
					this.OnIsPayChanging(value);
					this.SendPropertyChanging();
					this._IsPay = value;
					this.SendPropertyChanged("IsPay");
					this.OnIsPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressOrder", DbType="NVarChar(200)")]
		public string AddressOrder
		{
			get
			{
				return this._AddressOrder;
			}
			set
			{
				if ((this._AddressOrder != value))
				{
					this.OnAddressOrderChanging(value);
					this.SendPropertyChanging();
					this._AddressOrder = value;
					this.SendPropertyChanged("AddressOrder");
					this.OnAddressOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="IDOrder", OtherKey="IDOrder")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Order", Storage="_Res_Restaurant", ThisKey="IDRes", OtherKey="IDRes", IsForeignKey=true)]
		public Res_Restaurant Res_Restaurant
		{
			get
			{
				return this._Res_Restaurant.Entity;
			}
			set
			{
				Res_Restaurant previousValue = this._Res_Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Res_Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Restaurant.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Res_Restaurant.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._IDRes = value.IDRes;
					}
					else
					{
						this._IDRes = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IDDetail;
		
		private System.Nullable<int> _IDOrder;
		
		private System.Nullable<int> _IDDish;
		
		private string _AttributeXML;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDetailChanging(long value);
    partial void OnIDDetailChanged();
    partial void OnIDOrderChanging(System.Nullable<int> value);
    partial void OnIDOrderChanged();
    partial void OnIDDishChanging(System.Nullable<int> value);
    partial void OnIDDishChanged();
    partial void OnAttributeXMLChanging(string value);
    partial void OnAttributeXMLChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDetail", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IDDetail
		{
			get
			{
				return this._IDDetail;
			}
			set
			{
				if ((this._IDDetail != value))
				{
					this.OnIDDetailChanging(value);
					this.SendPropertyChanging();
					this._IDDetail = value;
					this.SendPropertyChanged("IDDetail");
					this.OnIDDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", DbType="Int")]
		public System.Nullable<int> IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDish", DbType="Int")]
		public System.Nullable<int> IDDish
		{
			get
			{
				return this._IDDish;
			}
			set
			{
				if ((this._IDDish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDishChanging(value);
					this.SendPropertyChanging();
					this._IDDish = value;
					this.SendPropertyChanged("IDDish");
					this.OnIDDishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeXML", DbType="NVarChar(500)")]
		public string AttributeXML
		{
			get
			{
				return this._AttributeXML;
			}
			set
			{
				if ((this._AttributeXML != value))
				{
					this.OnAttributeXMLChanging(value);
					this.SendPropertyChanging();
					this._AttributeXML = value;
					this.SendPropertyChanged("AttributeXML");
					this.OnAttributeXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderDetail", Storage="_Dish", ThisKey="IDDish", OtherKey="IDDish", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._IDDish = value.IDDish;
					}
					else
					{
						this._IDDish = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="IDOrder", OtherKey="IDOrder", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._IDOrder = value.IDOrder;
					}
					else
					{
						this._IDOrder = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Res_Category")]
	public partial class Res_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCate;
		
		private string _NameCate;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Res_Categoty_Mapping> _Res_Categoty_Mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCateChanging(int value);
    partial void OnIDCateChanged();
    partial void OnNameCateChanging(string value);
    partial void OnNameCateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Res_Category()
		{
			this._Res_Categoty_Mappings = new EntitySet<Res_Categoty_Mapping>(new Action<Res_Categoty_Mapping>(this.attach_Res_Categoty_Mappings), new Action<Res_Categoty_Mapping>(this.detach_Res_Categoty_Mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCate", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCate
		{
			get
			{
				return this._IDCate;
			}
			set
			{
				if ((this._IDCate != value))
				{
					this.OnIDCateChanging(value);
					this.SendPropertyChanging();
					this._IDCate = value;
					this.SendPropertyChanged("IDCate");
					this.OnIDCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCate", DbType="NVarChar(100)")]
		public string NameCate
		{
			get
			{
				return this._NameCate;
			}
			set
			{
				if ((this._NameCate != value))
				{
					this.OnNameCateChanging(value);
					this.SendPropertyChanging();
					this._NameCate = value;
					this.SendPropertyChanged("NameCate");
					this.OnNameCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Category_Res_Categoty_Mapping", Storage="_Res_Categoty_Mappings", ThisKey="IDCate", OtherKey="IDCate")]
		public EntitySet<Res_Categoty_Mapping> Res_Categoty_Mappings
		{
			get
			{
				return this._Res_Categoty_Mappings;
			}
			set
			{
				this._Res_Categoty_Mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Res_Categoty_Mappings(Res_Categoty_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Category = this;
		}
		
		private void detach_Res_Categoty_Mappings(Res_Categoty_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Res_Categoty_Mapping")]
	public partial class Res_Categoty_Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRCM;
		
		private System.Nullable<int> _IDRes;
		
		private System.Nullable<int> _IDCate;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Res_Category> _Res_Category;
		
		private EntityRef<Res_Restaurant> _Res_Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRCMChanging(int value);
    partial void OnIDRCMChanged();
    partial void OnIDResChanging(System.Nullable<int> value);
    partial void OnIDResChanged();
    partial void OnIDCateChanging(System.Nullable<int> value);
    partial void OnIDCateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Res_Categoty_Mapping()
		{
			this._Res_Category = default(EntityRef<Res_Category>);
			this._Res_Restaurant = default(EntityRef<Res_Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRCM", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRCM
		{
			get
			{
				return this._IDRCM;
			}
			set
			{
				if ((this._IDRCM != value))
				{
					this.OnIDRCMChanging(value);
					this.SendPropertyChanging();
					this._IDRCM = value;
					this.SendPropertyChanged("IDRCM");
					this.OnIDRCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", DbType="Int")]
		public System.Nullable<int> IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					if (this._Res_Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCate", DbType="Int")]
		public System.Nullable<int> IDCate
		{
			get
			{
				return this._IDCate;
			}
			set
			{
				if ((this._IDCate != value))
				{
					if (this._Res_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCateChanging(value);
					this.SendPropertyChanging();
					this._IDCate = value;
					this.SendPropertyChanged("IDCate");
					this.OnIDCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Category_Res_Categoty_Mapping", Storage="_Res_Category", ThisKey="IDCate", OtherKey="IDCate", IsForeignKey=true)]
		public Res_Category Res_Category
		{
			get
			{
				return this._Res_Category.Entity;
			}
			set
			{
				Res_Category previousValue = this._Res_Category.Entity;
				if (((previousValue != value) 
							|| (this._Res_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Category.Entity = null;
						previousValue.Res_Categoty_Mappings.Remove(this);
					}
					this._Res_Category.Entity = value;
					if ((value != null))
					{
						value.Res_Categoty_Mappings.Add(this);
						this._IDCate = value.IDCate;
					}
					else
					{
						this._IDCate = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Res_Categoty_Mapping", Storage="_Res_Restaurant", ThisKey="IDRes", OtherKey="IDRes", IsForeignKey=true)]
		public Res_Restaurant Res_Restaurant
		{
			get
			{
				return this._Res_Restaurant.Entity;
			}
			set
			{
				Res_Restaurant previousValue = this._Res_Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Res_Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Restaurant.Entity = null;
						previousValue.Res_Categoty_Mappings.Remove(this);
					}
					this._Res_Restaurant.Entity = value;
					if ((value != null))
					{
						value.Res_Categoty_Mappings.Add(this);
						this._IDRes = value.IDRes;
					}
					else
					{
						this._IDRes = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Res_Cuisine")]
	public partial class Res_Cuisine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCuisine;
		
		private string _NameCuisine;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Res_Cuisine_Mapping> _Res_Cuisine_Mappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCuisineChanging(int value);
    partial void OnIDCuisineChanged();
    partial void OnNameCuisineChanging(string value);
    partial void OnNameCuisineChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Res_Cuisine()
		{
			this._Res_Cuisine_Mappings = new EntitySet<Res_Cuisine_Mapping>(new Action<Res_Cuisine_Mapping>(this.attach_Res_Cuisine_Mappings), new Action<Res_Cuisine_Mapping>(this.detach_Res_Cuisine_Mappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCuisine", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCuisine
		{
			get
			{
				return this._IDCuisine;
			}
			set
			{
				if ((this._IDCuisine != value))
				{
					this.OnIDCuisineChanging(value);
					this.SendPropertyChanging();
					this._IDCuisine = value;
					this.SendPropertyChanged("IDCuisine");
					this.OnIDCuisineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCuisine", DbType="NVarChar(100)")]
		public string NameCuisine
		{
			get
			{
				return this._NameCuisine;
			}
			set
			{
				if ((this._NameCuisine != value))
				{
					this.OnNameCuisineChanging(value);
					this.SendPropertyChanging();
					this._NameCuisine = value;
					this.SendPropertyChanged("NameCuisine");
					this.OnNameCuisineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Cuisine_Res_Cuisine_Mapping", Storage="_Res_Cuisine_Mappings", ThisKey="IDCuisine", OtherKey="IDCuisine")]
		public EntitySet<Res_Cuisine_Mapping> Res_Cuisine_Mappings
		{
			get
			{
				return this._Res_Cuisine_Mappings;
			}
			set
			{
				this._Res_Cuisine_Mappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Res_Cuisine_Mappings(Res_Cuisine_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Cuisine = this;
		}
		
		private void detach_Res_Cuisine_Mappings(Res_Cuisine_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Cuisine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Res_Cuisine_Mapping")]
	public partial class Res_Cuisine_Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRCM;
		
		private System.Nullable<int> _IDRes;
		
		private System.Nullable<int> _IDCuisine;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Res_Cuisine> _Res_Cuisine;
		
		private EntityRef<Res_Restaurant> _Res_Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRCMChanging(int value);
    partial void OnIDRCMChanged();
    partial void OnIDResChanging(System.Nullable<int> value);
    partial void OnIDResChanged();
    partial void OnIDCuisineChanging(System.Nullable<int> value);
    partial void OnIDCuisineChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Res_Cuisine_Mapping()
		{
			this._Res_Cuisine = default(EntityRef<Res_Cuisine>);
			this._Res_Restaurant = default(EntityRef<Res_Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRCM", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRCM
		{
			get
			{
				return this._IDRCM;
			}
			set
			{
				if ((this._IDRCM != value))
				{
					this.OnIDRCMChanging(value);
					this.SendPropertyChanging();
					this._IDRCM = value;
					this.SendPropertyChanged("IDRCM");
					this.OnIDRCMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", DbType="Int")]
		public System.Nullable<int> IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					if (this._Res_Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCuisine", DbType="Int")]
		public System.Nullable<int> IDCuisine
		{
			get
			{
				return this._IDCuisine;
			}
			set
			{
				if ((this._IDCuisine != value))
				{
					if (this._Res_Cuisine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCuisineChanging(value);
					this.SendPropertyChanging();
					this._IDCuisine = value;
					this.SendPropertyChanged("IDCuisine");
					this.OnIDCuisineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Cuisine_Res_Cuisine_Mapping", Storage="_Res_Cuisine", ThisKey="IDCuisine", OtherKey="IDCuisine", IsForeignKey=true)]
		public Res_Cuisine Res_Cuisine
		{
			get
			{
				return this._Res_Cuisine.Entity;
			}
			set
			{
				Res_Cuisine previousValue = this._Res_Cuisine.Entity;
				if (((previousValue != value) 
							|| (this._Res_Cuisine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Cuisine.Entity = null;
						previousValue.Res_Cuisine_Mappings.Remove(this);
					}
					this._Res_Cuisine.Entity = value;
					if ((value != null))
					{
						value.Res_Cuisine_Mappings.Add(this);
						this._IDCuisine = value.IDCuisine;
					}
					else
					{
						this._IDCuisine = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Cuisine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Res_Cuisine_Mapping", Storage="_Res_Restaurant", ThisKey="IDRes", OtherKey="IDRes", IsForeignKey=true)]
		public Res_Restaurant Res_Restaurant
		{
			get
			{
				return this._Res_Restaurant.Entity;
			}
			set
			{
				Res_Restaurant previousValue = this._Res_Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Res_Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Res_Restaurant.Entity = null;
						previousValue.Res_Cuisine_Mappings.Remove(this);
					}
					this._Res_Restaurant.Entity = value;
					if ((value != null))
					{
						value.Res_Cuisine_Mappings.Add(this);
						this._IDRes = value.IDRes;
					}
					else
					{
						this._IDRes = default(Nullable<int>);
					}
					this.SendPropertyChanged("Res_Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Res_Restaurant")]
	public partial class Res_Restaurant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRes;
		
		private string _NameRes;
		
		private string _Summary;
		
		private string _DescriptionRes;
		
		private string _ResAddress;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Website;
		
		private string _Fax;
		
		private System.Nullable<int> _IDCity;
		
		private System.Nullable<int> _OwnerId;
		
		private System.Nullable<System.TimeSpan> _TimeStart;
		
		private System.Nullable<System.TimeSpan> _TimeEnd;
		
		private System.Nullable<System.TimeSpan> _TimeBreakStart;
		
		private System.Nullable<System.TimeSpan> _TimeBreakEnd;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<decimal> _ServiceFee;
		
		private System.Nullable<decimal> _Commission;
		
		private EntitySet<Dish_Category> _Dish_Categories;
		
		private EntitySet<Ingredient> _Ingredients;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Res_Categoty_Mapping> _Res_Categoty_Mappings;
		
		private EntitySet<Res_Cuisine_Mapping> _Res_Cuisine_Mappings;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDResChanging(int value);
    partial void OnIDResChanged();
    partial void OnNameResChanging(string value);
    partial void OnNameResChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnDescriptionResChanging(string value);
    partial void OnDescriptionResChanged();
    partial void OnResAddressChanging(string value);
    partial void OnResAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnIDCityChanging(System.Nullable<int> value);
    partial void OnIDCityChanged();
    partial void OnOwnerIdChanging(System.Nullable<int> value);
    partial void OnOwnerIdChanged();
    partial void OnTimeStartChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeStartChanged();
    partial void OnTimeEndChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeEndChanged();
    partial void OnTimeBreakStartChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeBreakStartChanged();
    partial void OnTimeBreakEndChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeBreakEndChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnServiceFeeChanging(System.Nullable<decimal> value);
    partial void OnServiceFeeChanged();
    partial void OnCommissionChanging(System.Nullable<decimal> value);
    partial void OnCommissionChanged();
    #endregion
		
		public Res_Restaurant()
		{
			this._Dish_Categories = new EntitySet<Dish_Category>(new Action<Dish_Category>(this.attach_Dish_Categories), new Action<Dish_Category>(this.detach_Dish_Categories));
			this._Ingredients = new EntitySet<Ingredient>(new Action<Ingredient>(this.attach_Ingredients), new Action<Ingredient>(this.detach_Ingredients));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Res_Categoty_Mappings = new EntitySet<Res_Categoty_Mapping>(new Action<Res_Categoty_Mapping>(this.attach_Res_Categoty_Mappings), new Action<Res_Categoty_Mapping>(this.detach_Res_Categoty_Mappings));
			this._Res_Cuisine_Mappings = new EntitySet<Res_Cuisine_Mapping>(new Action<Res_Cuisine_Mapping>(this.attach_Res_Cuisine_Mappings), new Action<Res_Cuisine_Mapping>(this.detach_Res_Cuisine_Mappings));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRes", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRes
		{
			get
			{
				return this._IDRes;
			}
			set
			{
				if ((this._IDRes != value))
				{
					this.OnIDResChanging(value);
					this.SendPropertyChanging();
					this._IDRes = value;
					this.SendPropertyChanged("IDRes");
					this.OnIDResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRes", DbType="NVarChar(100)")]
		public string NameRes
		{
			get
			{
				return this._NameRes;
			}
			set
			{
				if ((this._NameRes != value))
				{
					this.OnNameResChanging(value);
					this.SendPropertyChanging();
					this._NameRes = value;
					this.SendPropertyChanged("NameRes");
					this.OnNameResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(200)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionRes", DbType="NVarChar(4000)")]
		public string DescriptionRes
		{
			get
			{
				return this._DescriptionRes;
			}
			set
			{
				if ((this._DescriptionRes != value))
				{
					this.OnDescriptionResChanging(value);
					this.SendPropertyChanging();
					this._DescriptionRes = value;
					this.SendPropertyChanged("DescriptionRes");
					this.OnDescriptionResChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResAddress", DbType="NVarChar(200)")]
		public string ResAddress
		{
			get
			{
				return this._ResAddress;
			}
			set
			{
				if ((this._ResAddress != value))
				{
					this.OnResAddressChanging(value);
					this.SendPropertyChanging();
					this._ResAddress = value;
					this.SendPropertyChanged("ResAddress");
					this.OnResAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="NVarChar(200)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(100)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", DbType="Int")]
		public System.Nullable<int> IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int")]
		public System.Nullable<int> OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStart", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeStart
		{
			get
			{
				return this._TimeStart;
			}
			set
			{
				if ((this._TimeStart != value))
				{
					this.OnTimeStartChanging(value);
					this.SendPropertyChanging();
					this._TimeStart = value;
					this.SendPropertyChanged("TimeStart");
					this.OnTimeStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEnd", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeBreakStart", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeBreakStart
		{
			get
			{
				return this._TimeBreakStart;
			}
			set
			{
				if ((this._TimeBreakStart != value))
				{
					this.OnTimeBreakStartChanging(value);
					this.SendPropertyChanging();
					this._TimeBreakStart = value;
					this.SendPropertyChanged("TimeBreakStart");
					this.OnTimeBreakStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeBreakEnd", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeBreakEnd
		{
			get
			{
				return this._TimeBreakEnd;
			}
			set
			{
				if ((this._TimeBreakEnd != value))
				{
					this.OnTimeBreakEndChanging(value);
					this.SendPropertyChanging();
					this._TimeBreakEnd = value;
					this.SendPropertyChanged("TimeBreakEnd");
					this.OnTimeBreakEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceFee", DbType="Money")]
		public System.Nullable<decimal> ServiceFee
		{
			get
			{
				return this._ServiceFee;
			}
			set
			{
				if ((this._ServiceFee != value))
				{
					this.OnServiceFeeChanging(value);
					this.SendPropertyChanging();
					this._ServiceFee = value;
					this.SendPropertyChanged("ServiceFee");
					this.OnServiceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Money")]
		public System.Nullable<decimal> Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this.OnCommissionChanging(value);
					this.SendPropertyChanging();
					this._Commission = value;
					this.SendPropertyChanged("Commission");
					this.OnCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Dish_Category", Storage="_Dish_Categories", ThisKey="IDRes", OtherKey="IDRes")]
		public EntitySet<Dish_Category> Dish_Categories
		{
			get
			{
				return this._Dish_Categories;
			}
			set
			{
				this._Dish_Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Ingredient", Storage="_Ingredients", ThisKey="IDRes", OtherKey="IDRes")]
		public EntitySet<Ingredient> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Order", Storage="_Orders", ThisKey="IDRes", OtherKey="IDRes")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Res_Categoty_Mapping", Storage="_Res_Categoty_Mappings", ThisKey="IDRes", OtherKey="IDRes")]
		public EntitySet<Res_Categoty_Mapping> Res_Categoty_Mappings
		{
			get
			{
				return this._Res_Categoty_Mappings;
			}
			set
			{
				this._Res_Categoty_Mappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Res_Restaurant_Res_Cuisine_Mapping", Storage="_Res_Cuisine_Mappings", ThisKey="IDRes", OtherKey="IDRes")]
		public EntitySet<Res_Cuisine_Mapping> Res_Cuisine_Mappings
		{
			get
			{
				return this._Res_Cuisine_Mappings;
			}
			set
			{
				this._Res_Cuisine_Mappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Res_Restaurant", Storage="_City", ThisKey="IDCity", OtherKey="IDCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Res_Restaurants.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Res_Restaurants.Add(this);
						this._IDCity = value.IDCity;
					}
					else
					{
						this._IDCity = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dish_Categories(Dish_Category entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = this;
		}
		
		private void detach_Dish_Categories(Dish_Category entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = null;
		}
		
		private void attach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = this;
		}
		
		private void detach_Ingredients(Ingredient entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = null;
		}
		
		private void attach_Res_Categoty_Mappings(Res_Categoty_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = this;
		}
		
		private void detach_Res_Categoty_Mappings(Res_Categoty_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = null;
		}
		
		private void attach_Res_Cuisine_Mappings(Res_Cuisine_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = this;
		}
		
		private void detach_Res_Cuisine_Mappings(Res_Cuisine_Mapping entity)
		{
			this.SendPropertyChanging();
			entity.Res_Restaurant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WarehouseExport")]
	public partial class WarehouseExport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDExport;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _ExportDate;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ExportDetail> _ExportDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDExportChanging(int value);
    partial void OnIDExportChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnExportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExportDateChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public WarehouseExport()
		{
			this._ExportDetails = new EntitySet<ExportDetail>(new Action<ExportDetail>(this.attach_ExportDetails), new Action<ExportDetail>(this.detach_ExportDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDExport", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDExport
		{
			get
			{
				return this._IDExport;
			}
			set
			{
				if ((this._IDExport != value))
				{
					this.OnIDExportChanging(value);
					this.SendPropertyChanging();
					this._IDExport = value;
					this.SendPropertyChanged("IDExport");
					this.OnIDExportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExportDate
		{
			get
			{
				return this._ExportDate;
			}
			set
			{
				if ((this._ExportDate != value))
				{
					this.OnExportDateChanging(value);
					this.SendPropertyChanging();
					this._ExportDate = value;
					this.SendPropertyChanged("ExportDate");
					this.OnExportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WarehouseExport_ExportDetail", Storage="_ExportDetails", ThisKey="IDExport", OtherKey="IDExport")]
		public EntitySet<ExportDetail> ExportDetails
		{
			get
			{
				return this._ExportDetails;
			}
			set
			{
				this._ExportDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExportDetails(ExportDetail entity)
		{
			this.SendPropertyChanging();
			entity.WarehouseExport = this;
		}
		
		private void detach_ExportDetails(ExportDetail entity)
		{
			this.SendPropertyChanging();
			entity.WarehouseExport = null;
		}
	}
}
#pragma warning restore 1591
